//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(toofz.NecroDancer.NecroDancerContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets006f80c5c86e71889ac850458e54c777e652f81716f4bf0195c7774573bd65fd))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.2.0")]
    internal sealed class ViewsForBaseEntitySets006f80c5c86e71889ac850458e54c777e652f81716f4bf0195c7774573bd65fd : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "006f80c5c86e71889ac850458e54c777e652f81716f4bf0195c7774573bd65fd"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.Enemy")
            {
                return GetView0();
            }

            if (extentName == "NecroDancerContext.Enemies")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.Item")
            {
                return GetView2();
            }

            if (extentName == "NecroDancerContext.Items")
            {
                return GetView3();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Enemy.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Enemy
        [CodeFirstDatabaseSchema.Enemy](T1.Enemy_Name, T1.Enemy_Type, T1.Enemy_Id, T1.Enemy_FriendlyName, T1.[Enemy.Stats_BeatsPerMove], T1.[Enemy.Stats_CoinsToDrop], T1.[Enemy.Stats_DamagePerHit], T1.[Enemy.Stats_Health], T1.[Enemy.Stats_Movement], T1.[Enemy.OptionalStats_Boss], T1.[Enemy.OptionalStats_BounceOnMovementFail], T1.[Enemy.OptionalStats_Floating], T1.[Enemy.OptionalStats_IgnoreLiquids], T1.[Enemy.OptionalStats_IgnoreWalls], T1.[Enemy.OptionalStats_IsMonkeyLike], T1.[Enemy.OptionalStats_Massive], T1.[Enemy.OptionalStats_Miniboss], T1.Enemy_DisplayName)
    FROM (
        SELECT 
            T.Name AS Enemy_Name, 
            T.Type AS Enemy_Type, 
            T.Id AS Enemy_Id, 
            T.FriendlyName AS Enemy_FriendlyName, 
            T.Stats.BeatsPerMove AS [Enemy.Stats_BeatsPerMove], 
            T.Stats.CoinsToDrop AS [Enemy.Stats_CoinsToDrop], 
            T.Stats.DamagePerHit AS [Enemy.Stats_DamagePerHit], 
            T.Stats.Health AS [Enemy.Stats_Health], 
            T.Stats.Movement AS [Enemy.Stats_Movement], 
            T.OptionalStats.Boss AS [Enemy.OptionalStats_Boss], 
            T.OptionalStats.BounceOnMovementFail AS [Enemy.OptionalStats_BounceOnMovementFail], 
            T.OptionalStats.Floating AS [Enemy.OptionalStats_Floating], 
            T.OptionalStats.IgnoreLiquids AS [Enemy.OptionalStats_IgnoreLiquids], 
            T.OptionalStats.IgnoreWalls AS [Enemy.OptionalStats_IgnoreWalls], 
            T.OptionalStats.IsMonkeyLike AS [Enemy.OptionalStats_IsMonkeyLike], 
            T.OptionalStats.Massive AS [Enemy.OptionalStats_Massive], 
            T.OptionalStats.Miniboss AS [Enemy.OptionalStats_Miniboss], 
            T.DisplayName AS Enemy_DisplayName, 
            True AS _from0
        FROM NecroDancerContext.Enemies AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NecroDancerContext.Enemies.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Enemies
        [toofz.NecroDancer.Enemy](T3.Enemy_Name, T3.Enemy_Type, T3.Enemy_Id, T3.Enemy_FriendlyName, T3.Enemy_Stats, T3.Enemy_OptionalStats, T3.Enemy_DisplayName)
    FROM (
        SELECT -- Constructing Stats
            T2.Enemy_Name, 
            T2.Enemy_Type, 
            T2.Enemy_Id, 
            T2.Enemy_FriendlyName, 
            [toofz.NecroDancer.Stats](T2.Enemy_Stats_BeatsPerMove, T2.Enemy_Stats_CoinsToDrop, T2.Enemy_Stats_DamagePerHit, T2.Enemy_Stats_Health, T2.Enemy_Stats_Movement) AS Enemy_Stats, 
            T2.Enemy_OptionalStats, 
            T2.Enemy_DisplayName
        FROM (
            SELECT -- Constructing OptionalStats
                T1.Enemy_Name, 
                T1.Enemy_Type, 
                T1.Enemy_Id, 
                T1.Enemy_FriendlyName, 
                T1.Enemy_Stats_BeatsPerMove, 
                T1.Enemy_Stats_CoinsToDrop, 
                T1.Enemy_Stats_DamagePerHit, 
                T1.Enemy_Stats_Health, 
                T1.Enemy_Stats_Movement, 
                [toofz.NecroDancer.OptionalStats](T1.Enemy_OptionalStats_Boss, T1.Enemy_OptionalStats_BounceOnMovementFail, T1.Enemy_OptionalStats_Floating, T1.Enemy_OptionalStats_IgnoreLiquids, T1.Enemy_OptionalStats_IgnoreWalls, T1.Enemy_OptionalStats_IsMonkeyLike, T1.Enemy_OptionalStats_Massive, T1.Enemy_OptionalStats_Miniboss) AS Enemy_OptionalStats, 
                T1.Enemy_DisplayName
            FROM (
                SELECT 
                    T.Name AS Enemy_Name, 
                    T.Type AS Enemy_Type, 
                    T.Id AS Enemy_Id, 
                    T.FriendlyName AS Enemy_FriendlyName, 
                    T.Stats_BeatsPerMove AS Enemy_Stats_BeatsPerMove, 
                    T.Stats_CoinsToDrop AS Enemy_Stats_CoinsToDrop, 
                    T.Stats_DamagePerHit AS Enemy_Stats_DamagePerHit, 
                    T.Stats_Health AS Enemy_Stats_Health, 
                    T.Stats_Movement AS Enemy_Stats_Movement, 
                    T.OptionalStats_Boss AS Enemy_OptionalStats_Boss, 
                    T.OptionalStats_BounceOnMovementFail AS Enemy_OptionalStats_BounceOnMovementFail, 
                    T.OptionalStats_Floating AS Enemy_OptionalStats_Floating, 
                    T.OptionalStats_IgnoreLiquids AS Enemy_OptionalStats_IgnoreLiquids, 
                    T.OptionalStats_IgnoreWalls AS Enemy_OptionalStats_IgnoreWalls, 
                    T.OptionalStats_IsMonkeyLike AS Enemy_OptionalStats_IsMonkeyLike, 
                    T.OptionalStats_Massive AS Enemy_OptionalStats_Massive, 
                    T.OptionalStats_Miniboss AS Enemy_OptionalStats_Miniboss, 
                    T.DisplayName AS Enemy_DisplayName, 
                    True AS _from0
                FROM CodeFirstDatabase.Enemy AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Item.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Item
        [CodeFirstDatabaseSchema.Item](T1.Item_Name, T1.Item_ImagePath, T1.Item_Bouncer, T1.Item_CoinCost, T1.Item_Consumable, T1.Item_Cooldown, T1.Item_Data, T1.Item_DiamondCost, T1.Item_DiamondDealable, T1.Item_FromTransmute, T1.Item_ImageHeight, T1.Item_ImageWidth, T1.Item_IsArmor, T1.Item_IsAxe, T1.Item_IsBlood, T1.Item_IsBlunderbuss, T1.Item_IsBow, T1.Item_IsBroadsword, T1.Item_IsCat, T1.Item_IsCoin, T1.Item_IsCrossbow, T1.Item_IsCutlass, T1.Item_IsDagger, T1.Item_IsDiamond, T1.Item_IsFamiliar, T1.Item_IsFlail, T1.Item_IsFood, T1.Item_IsFrost, T1.Item_IsGlass, T1.Item_IsGold, T1.Item_IsHarp, T1.Item_IsLongsword, T1.Item_IsMagicFood, T1.Item_IsObsidian, T1.Item_IsPhasing, T1.Item_IsPiercing, T1.Item_IsRapier, T1.Item_IsRifle, T1.Item_IsScroll, T1.Item_IsShovel, T1.Item_IsSpear, T1.Item_IsSpell, T1.Item_IsStackable, T1.Item_IsStaff, T1.Item_IsTemp, T1.Item_IsTitanium, T1.Item_IsTorch, T1.Item_IsWarhammer, T1.Item_IsWeapon, T1.Item_IsWhip, T1.Item_PlayerKnockback, T1.Item_Quantity, T1.Item_Set, T1.Item_Slot, T1.Item_TemporaryMapSight, T1.Item_UseGreater, T1.Item_DisplayName)
    FROM (
        SELECT 
            T.Name AS Item_Name, 
            T.ImagePath AS Item_ImagePath, 
            T.Bouncer AS Item_Bouncer, 
            T.CoinCost AS Item_CoinCost, 
            T.Consumable AS Item_Consumable, 
            T.Cooldown AS Item_Cooldown, 
            T.Data AS Item_Data, 
            T.DiamondCost AS Item_DiamondCost, 
            T.DiamondDealable AS Item_DiamondDealable, 
            T.FromTransmute AS Item_FromTransmute, 
            T.ImageHeight AS Item_ImageHeight, 
            T.ImageWidth AS Item_ImageWidth, 
            T.IsArmor AS Item_IsArmor, 
            T.IsAxe AS Item_IsAxe, 
            T.IsBlood AS Item_IsBlood, 
            T.IsBlunderbuss AS Item_IsBlunderbuss, 
            T.IsBow AS Item_IsBow, 
            T.IsBroadsword AS Item_IsBroadsword, 
            T.IsCat AS Item_IsCat, 
            T.IsCoin AS Item_IsCoin, 
            T.IsCrossbow AS Item_IsCrossbow, 
            T.IsCutlass AS Item_IsCutlass, 
            T.IsDagger AS Item_IsDagger, 
            T.IsDiamond AS Item_IsDiamond, 
            T.IsFamiliar AS Item_IsFamiliar, 
            T.IsFlail AS Item_IsFlail, 
            T.IsFood AS Item_IsFood, 
            T.IsFrost AS Item_IsFrost, 
            T.IsGlass AS Item_IsGlass, 
            T.IsGold AS Item_IsGold, 
            T.IsHarp AS Item_IsHarp, 
            T.IsLongsword AS Item_IsLongsword, 
            T.IsMagicFood AS Item_IsMagicFood, 
            T.IsObsidian AS Item_IsObsidian, 
            T.IsPhasing AS Item_IsPhasing, 
            T.IsPiercing AS Item_IsPiercing, 
            T.IsRapier AS Item_IsRapier, 
            T.IsRifle AS Item_IsRifle, 
            T.IsScroll AS Item_IsScroll, 
            T.IsShovel AS Item_IsShovel, 
            T.IsSpear AS Item_IsSpear, 
            T.IsSpell AS Item_IsSpell, 
            T.IsStackable AS Item_IsStackable, 
            T.IsStaff AS Item_IsStaff, 
            T.IsTemp AS Item_IsTemp, 
            T.IsTitanium AS Item_IsTitanium, 
            T.IsTorch AS Item_IsTorch, 
            T.IsWarhammer AS Item_IsWarhammer, 
            T.IsWeapon AS Item_IsWeapon, 
            T.IsWhip AS Item_IsWhip, 
            T.PlayerKnockback AS Item_PlayerKnockback, 
            T.Quantity AS Item_Quantity, 
            T.[Set] AS Item_Set, 
            T.Slot AS Item_Slot, 
            T.TemporaryMapSight AS Item_TemporaryMapSight, 
            T.UseGreater AS Item_UseGreater, 
            T.DisplayName AS Item_DisplayName, 
            True AS _from0
        FROM NecroDancerContext.Items AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for NecroDancerContext.Items.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Items
        [toofz.NecroDancer.Item](T1.Item_Name, T1.Item_ImagePath, T1.Item_Bouncer, T1.Item_CoinCost, T1.Item_Consumable, T1.Item_Cooldown, T1.Item_Data, T1.Item_DiamondCost, T1.Item_DiamondDealable, T1.Item_FromTransmute, T1.Item_ImageHeight, T1.Item_ImageWidth, T1.Item_IsArmor, T1.Item_IsAxe, T1.Item_IsBlood, T1.Item_IsBlunderbuss, T1.Item_IsBow, T1.Item_IsBroadsword, T1.Item_IsCat, T1.Item_IsCoin, T1.Item_IsCrossbow, T1.Item_IsCutlass, T1.Item_IsDagger, T1.Item_IsDiamond, T1.Item_IsFamiliar, T1.Item_IsFlail, T1.Item_IsFood, T1.Item_IsFrost, T1.Item_IsGlass, T1.Item_IsGold, T1.Item_IsHarp, T1.Item_IsLongsword, T1.Item_IsMagicFood, T1.Item_IsObsidian, T1.Item_IsPhasing, T1.Item_IsPiercing, T1.Item_IsRapier, T1.Item_IsRifle, T1.Item_IsScroll, T1.Item_IsShovel, T1.Item_IsSpear, T1.Item_IsSpell, T1.Item_IsStackable, T1.Item_IsStaff, T1.Item_IsTemp, T1.Item_IsTitanium, T1.Item_IsTorch, T1.Item_IsWarhammer, T1.Item_IsWeapon, T1.Item_IsWhip, T1.Item_PlayerKnockback, T1.Item_Quantity, T1.Item_Set, T1.Item_Slot, T1.Item_TemporaryMapSight, T1.Item_UseGreater, T1.Item_DisplayName)
    FROM (
        SELECT 
            T.Name AS Item_Name, 
            T.ImagePath AS Item_ImagePath, 
            T.Bouncer AS Item_Bouncer, 
            T.CoinCost AS Item_CoinCost, 
            T.Consumable AS Item_Consumable, 
            T.Cooldown AS Item_Cooldown, 
            T.Data AS Item_Data, 
            T.DiamondCost AS Item_DiamondCost, 
            T.DiamondDealable AS Item_DiamondDealable, 
            T.FromTransmute AS Item_FromTransmute, 
            T.ImageHeight AS Item_ImageHeight, 
            T.ImageWidth AS Item_ImageWidth, 
            T.IsArmor AS Item_IsArmor, 
            T.IsAxe AS Item_IsAxe, 
            T.IsBlood AS Item_IsBlood, 
            T.IsBlunderbuss AS Item_IsBlunderbuss, 
            T.IsBow AS Item_IsBow, 
            T.IsBroadsword AS Item_IsBroadsword, 
            T.IsCat AS Item_IsCat, 
            T.IsCoin AS Item_IsCoin, 
            T.IsCrossbow AS Item_IsCrossbow, 
            T.IsCutlass AS Item_IsCutlass, 
            T.IsDagger AS Item_IsDagger, 
            T.IsDiamond AS Item_IsDiamond, 
            T.IsFamiliar AS Item_IsFamiliar, 
            T.IsFlail AS Item_IsFlail, 
            T.IsFood AS Item_IsFood, 
            T.IsFrost AS Item_IsFrost, 
            T.IsGlass AS Item_IsGlass, 
            T.IsGold AS Item_IsGold, 
            T.IsHarp AS Item_IsHarp, 
            T.IsLongsword AS Item_IsLongsword, 
            T.IsMagicFood AS Item_IsMagicFood, 
            T.IsObsidian AS Item_IsObsidian, 
            T.IsPhasing AS Item_IsPhasing, 
            T.IsPiercing AS Item_IsPiercing, 
            T.IsRapier AS Item_IsRapier, 
            T.IsRifle AS Item_IsRifle, 
            T.IsScroll AS Item_IsScroll, 
            T.IsShovel AS Item_IsShovel, 
            T.IsSpear AS Item_IsSpear, 
            T.IsSpell AS Item_IsSpell, 
            T.IsStackable AS Item_IsStackable, 
            T.IsStaff AS Item_IsStaff, 
            T.IsTemp AS Item_IsTemp, 
            T.IsTitanium AS Item_IsTitanium, 
            T.IsTorch AS Item_IsTorch, 
            T.IsWarhammer AS Item_IsWarhammer, 
            T.IsWeapon AS Item_IsWeapon, 
            T.IsWhip AS Item_IsWhip, 
            T.PlayerKnockback AS Item_PlayerKnockback, 
            T.Quantity AS Item_Quantity, 
            T.[Set] AS Item_Set, 
            T.Slot AS Item_Slot, 
            T.TemporaryMapSight AS Item_TemporaryMapSight, 
            T.UseGreater AS Item_UseGreater, 
            T.DisplayName AS Item_DisplayName, 
            True AS _from0
        FROM CodeFirstDatabase.Item AS T
    ) AS T1");
        }
    }
}
